{"meta":{"title":"Tom's blog","subtitle":"some things are interesting","description":"some things are interesting","author":"tom.li","url":"http://example.com","root":"/"},"pages":[{"title":"所有分类","date":"2025-03-15T12:10:42.923Z","updated":"2025-03-15T12:10:42.923Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"我的朋友们","date":"2025-03-11T15:29:00.000Z","updated":"2025-03-15T12:10:42.923Z","comments":true,"path":"friends/index.html","permalink":"http://example.com/friends/index.html","excerpt":"这里写友链上方的内容。","text":"这里写友链上方的内容。 这里可以写友链页面下方的文字备注，例如自己的友链规范、示例等。"},{"title":"所有标签","date":"2025-03-11T15:29:00.000Z","updated":"2025-03-15T12:10:42.923Z","comments":true,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":"","author":"tom.li"},{"title":"","date":"2025-03-11T15:29:00.000Z","updated":"2025-03-15T12:10:42.923Z","comments":true,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":"下面写关于自己的内容"}],"posts":[{"title":"python学习之call脚本","slug":"语言/python/python学习之call脚本","date":"2025-03-26T14:36:39.000Z","updated":"2025-03-26T15:25:08.598Z","comments":true,"path":"2025/03/26/语言/python/python学习之call脚本/","permalink":"http://example.com/2025/03/26/%E8%AF%AD%E8%A8%80/python/python%E5%AD%A6%E4%B9%A0%E4%B9%8Bcall%E8%84%9A%E6%9C%AC/","excerpt":"","text":"前言最近在用python写一些工具tool，有时候想偷个懒，直接调用现在有的脚本，而不是自己重写，由于环境是windows，基本上调用的就 .bat文件，因此在这里记录一下，防丢~ python 实例1234567891011121314151617181920212223242526272829303132import subprocessdef run_bat_with_window(bat_path, *args): &quot;&quot;&quot; 直接弹出CMD窗口执行.bat脚本 :param bat_path: .bat文件路径 :param args: 可变参数，支持任意数量 &quot;&quot;&quot; try: # 构造命令列表（自动处理路径空格和参数转义） cmd = [bat_path] cmd.extend(str(arg) for arg in args) # 启动独立CMD窗口执行（仅Windows有效） subprocess.run( cmd, creationflags=subprocess.CREATE_NEW_CONSOLE, check=True ) except subprocess.CalledProcessError as e: print(f&quot;错误：脚本执行失败 (状态码 &#123;e.returncode&#125;)&quot;) except FileNotFoundError: print(f&quot;错误：找不到文件 &#x27;&#123;bat_path&#125;&#x27;&quot;) except Exception as e: print(f&quot;未知错误：&#123;str(e)&#125;&quot;)# 使用示例if __name__ == &quot;__main__&quot;: bat_file = r&quot;F:\\python_study\\callbatDemo\\example.bat&quot; # 包含空格的路径测试 run_bat_with_window(bat_file, 2, 1, &quot;hello world&quot;, &quot;special&amp;char!&quot;) bat脚本实例12345678910111213141516171819202122232425262728@echo offchcp 65001 &gt; nultitle 参数过滤监控窗口color 0Aecho [系统日志] 参数过滤器启动 &gt; conecho -----------------------------------setlocal enabledelayedexpansionset counter=0:loopset /a counter+=1if &quot;%~1&quot;==&quot;&quot; goto doneif &quot;%~1&quot;==&quot;1&quot; ( echo [成功] 参数!counter!: %~1) else ( echo [忽略] 参数!counter!: %~1)shiftgoto loop:doneecho -----------------------------------echo 总计处理参数数: %counter%pause 运行结果运行后会叫起来一个cmd窗口，然后显示对应参数结果 小结这里主要是使用了Python中的subprocess模块，该模块核心函数如下： 方法 特点 适用场景 subprocess.run() 高级封装，自动等待完成，返回CompletedProcess对象 简单命令执行，需获取完整结果 subprocess.Popen() 底层接口，提供进程交互能力（输入&#x2F;输出流控制） 需要实时交互或后台运行 subprocess.call() 旧版方法，返回退出码（等同于run().returncode） 兼容旧代码 windows 批处理脚本中，是允许携带参数进入脚本的，其获取方式就是如下： 123`%0`：脚本自身名称（如 `my_script.bat`）`%1` ~ `%9`：第1到第9个传入参数`%*`：所有参数（`%1`及之后的所有内容） 其中： 12保留引号：%1（直接获取原始值，包含引号）去除引号：%~1（自动去除参数外层引号） 拓展： 修饰符 作用 示例（参数为 &quot;D:\\Docs\\file.txt&quot;） %~f1 完整路径 D:\\Docs\\file.txt %~d1 驱动器号 D: %~p1 路径（不含文件名） \\Docs\\ %~n1 文件名（不含扩展名） file %~x1 扩展名 .txt %~s1 短路径（8.3格式） D:\\DOCS~1\\file.txt %~a1 文件属性 --a------ %~t1 最后修改时间 2023-08-01 14:30 %~z1 文件大小（字节） 1024","categories":[{"name":"python学习","slug":"python学习","permalink":"http://example.com/categories/python%E5%AD%A6%E4%B9%A0/"},{"name":"python小妙招","slug":"python学习/python小妙招","permalink":"http://example.com/categories/python%E5%AD%A6%E4%B9%A0/python%E5%B0%8F%E5%A6%99%E6%8B%9B/"}],"tags":[{"name":"python","slug":"python","permalink":"http://example.com/tags/python/"}]},{"title":"hexo 学习之文章界面配置","slug":"Hexo/hexo-学习之文章界面配置","date":"2025-03-22T03:39:05.000Z","updated":"2025-04-02T14:14:09.061Z","comments":true,"path":"2025/03/22/Hexo/hexo-学习之文章界面配置/","permalink":"http://example.com/2025/03/22/Hexo/hexo-%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%96%87%E7%AB%A0%E7%95%8C%E9%9D%A2%E9%85%8D%E7%BD%AE/","excerpt":"","text":"前言当你配置好主页之后，就会想着将文章的内容进行配置了，那么应该如何做？别担心，本文会叫你如何开始写blog，以及写完之后在blog页面的一些配置，还有就是如何开发评论区共他人评论指导~}好了，废话不多说，开始教程了！ 如何生产一篇文章当我们主页配置好了以后，就可以开始写blog了，基本上我们只需要熟练使用以下cmd就可以了： 12345678#新建一篇文章：hexo new &quot;文章名&quot;#预览文章：hexo s#部署文章到网页hexo clean &amp;&amp; hexo g &amp;&amp; hexo d 我们首先建立一个 myFirstTestBlog 的文章，在bash界面，输入 hexo new &quot;myFirstTestBlog&quot; ，运行之后结果如下： 你可以在 source\\_post 目录下找到你新建的文件： 好了，到这里就新建好了一篇 blog了。 新增一下 tags 和 categories ，然后就可以开始写了，我简单做一个demo: 然后我们去浏览器上面看看效果如下： 看到这个截图，你就会想，好好好，这菜单是个啥，有用吗？文章作者也没有，评论去也没有，这怎么行，不要慌，我来带你继续往下看； 如何修改菜单栏菜单栏被放在 Navigation Bar 下面，同样的手法，我们从 volantis 主题下的 _config.yml copy下这部分内容，即可开始菜单栏的修改； 1234567891011121314151617181920212223242526272829 ############################### Navigation Bar ############################### &gt; start# 注意事项：建议规范全站路径 URL 最后带一个 &quot;/&quot; 例如 &quot;about/&quot;navbar: visiable: auto # always, auto logo: # choose [img] or [icon + title] img: volantis-static/media/org.volantis/blog/Logo-NavBar@3x.png # https://cdn.jsdelivr.net/gh/volantis-x/cdn-org/blog/Logo-NavBar@3x.png icon: title: menu: - name: 博客 icon: fa-solid fa-rss url: / - name: 分类 icon: fa-solid fa-folder-open url: categories/ - name: 标签 icon: fa-solid fa-tags url: tags/ - name: 归档 icon: fa-solid fa-archive url: archives/ - name: 友链 icon: fa-solid fa-link url: friends/ - name: 关于 icon: fa-solid fa-info-circle url: about/ search: Search... # Search bar placeholder############################### Navigation Bar ############################### &gt; end 最开始可以发现只有点击博客会有反馈，其他的分类，标签，归档，友链，关于都没有反应，那需要如何做才能有效果呢？ 首先我们需要明白下面这个格式是一个功能： 123- name: 博客 icon: fa-solid fa-rss url: / name 就是功能名字，icon 就是要显示的图标，这部分可以参考前面的描述，url就是对应的地址； 问题接着来了，url 如何获取，你可以贴一个网址来跳转过去，也可以访问本地位置，需要怎么做，看看示例里面，对应的就是本地的位置；比如 categories/ 就是在 source下面建立对应文件夹即index文件； 我们可以采取如下方式做到： 1234567hexo new page &quot;XXX&quot;#示例hexo new page &quot;categories&quot;hexo new page &quot;tags&quot;hexo new page &quot;archives&quot;hexo new page &quot;friends&quot;hexo new page &quot;about&quot; 当你运行完上述命令后会得到如下几个文件夹： 同样 hexo s访问一下 http://localhost:4000/，点击你就会发现已经出来对应的页面了，如下： 当然还有更多的玩法，比如你可以增加一个栏目：更多 ，在 更多里面增加一些栏目，怎么做？参考如下示例： 123456789-name: 更多 icon: fa-solid fa-ellipsis-v rows: - name: 主题源码 url: https://github.com/volantis-x/hexo-theme-volantis/ - name: 更新日志 url: https://github.com/volantis-x/hexo-theme-volantis/releases/ - name: hr - name: 有疑问？ 解释一下就是多了一个 rows，这个下面就是你可以下拉更多栏目，其中 - name: hr 代表分割线，同样展示一下这一块的结果： 在这里，特别指出友链相关的配置参考教程在这里 ： 友链页面 如何添加评论区菜单栏修改完毕后，就是如何添加评论区了，这部分主要参考如下连接 评论系统； 我们主打一个白嫖，就用giscus了，借用github评论功能，具体做法如下： 1. 创建github仓库在个人仓库创建一个repo，选择public： 仓库需要满足以下三个条件： 该仓库是公开的，否则访客将无法查看 discussion。 giscus app 已安装，否则访客将无法评论和回应。 Discussions 功能已在你的仓库中启用。 第一个条件在创建repo的时候就已经满足，接下来就是安装giscus app到repo中； 访问 GitHub Apps - giscus 选择对应仓库即可安装到repo中。 首先在仓库设置中找到github apps： 然后点击Configure: 输入密码后进入配置对应repo权限，如下： 设置完成后重新进入setting，并开启Discussion 2.获取评论系统配置信息访问 https://giscus.app/，找到仓库，填写 用户名/仓库名，例如我这里就是 DevBugCat/testDiscuss 然后选择分类为 Announcements 随后就继续往下就可以看见如下配置： 3.yml配置开启评论区我们将如下部分的设定copy到 _config.volantis.yml中 12345678910111213141516171819comments: service: giscus # giscus # https://giscus.app # https://github.com/laymonage/giscus giscus: # 以下配置按照 yml 格式增删填写即可 repo: xxx/xxx repo-id: xxx category: xxx category-id: xxx mapping: &quot;pathname&quot; reactions-enabled: &quot;1&quot; emit-metadata: &quot;0&quot; lang: &quot;zh-CN&quot; # 以上配置按照 yml 格式增删填写即可 theme: light: &quot;light&quot; # https://gcore.jsdelivr.net/gh/volantis-x/cdn-volantis@master/css/giscus/light.css dark: &quot;dark&quot; # https://gcore.jsdelivr.net/gh/volantis-x/cdn-volantis@master/css/giscus/dark.css 其中，xxx部分就是我们在giscus里面生成的数据，直接按照内容copy过去即可了；这个时候重新部署一下就可以使用评论系统了： 4.评论区管理当评论区开启之后，可能有时候会需要管理评论区，那去哪里可以找到呢？我们首先新增一个测试一下的评论，然后找到自己放评论区的仓库； 点击 Discussion就可以找到评论： 比如我这里的测试一下： 后期就可以进行评论区的管理了。 结语其他的一些细枝末节的设计就不再赘述，相信有了上面的功能demo，后续大家也可以自行按照volantis 主题文档进行修改了，搭建个人博客系列到这里就结束了！","categories":[{"name":"Hexo","slug":"Hexo","permalink":"http://example.com/categories/Hexo/"},{"name":"Hexo 学习记录","slug":"Hexo/Hexo-学习记录","permalink":"http://example.com/categories/Hexo/Hexo-%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://example.com/tags/hexo/"}]},{"title":"hexo 学习之个人博客创建与调教","slug":"Hexo/hexo-学习之主题安装","date":"2025-03-15T14:15:03.000Z","updated":"2025-03-21T23:45:32.572Z","comments":true,"path":"2025/03/15/Hexo/hexo-学习之主题安装/","permalink":"http://example.com/2025/03/15/Hexo/hexo-%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%B8%BB%E9%A2%98%E5%AE%89%E8%A3%85/","excerpt":"","text":"前言hexo + github 搭配好个人blog之后，可能会觉得有时候主题看起来没有那么帅气，需要更改以下风格才能适应自己，但是自己又不是做前端的，怎么办？这个时候就需要白嫖了，在 hexo 主题界面 上可以挑选各种主题，总有一款适合你自己。 回归正题，本文主要介绍如何使用hexo 生成一个 个人blog 并将volantis主题安装到个人blog中：相关环境准备参考： hexo 搭建个人blog 随便创建一个文件夹，我这里以MyBlogSample为例子，进入文件夹中，右键选择Open git bash here，如下：我本地因为使用VS 挂了git bash，因此是使用VS 的Terminal： 输入以下命令创建个人blog； 1hexo init 如果hexo init 执行比较慢的话，可以使用以下命令代替： 12git clone https://github.com/hexojs/hexo-starter myblogcd myblog 当出现如下这些文件，代表拉取成功了： 测试个人blog是否成功，使用如下命令; 1hexo s 会得到如下结果： 如果在运行过程中出现如下错误，就按照提示输入命令即可： 1rm -rf node_modules &amp;&amp; npm install --force 运行完毕后会出现如下结果： 然后在个人浏览器中输入 http://localhost:4000/ 即可访问部署好的blog，后续debug都将采用此方法。初始blog界面如下，如果看到这个界面，就代表你已经成功部署了个人blog了。 volantis主题安装从 hexo 主题界面 搜索到volantis之后，可以进入volantis文档 查看如何安装volantis 主题；首先在文件夹中找到_config.yml 修改主题为volantis: 1theme: volantis 然后在bash界面输入以下cmd： 1npm i hexo-theme-volantis 出现这个结果就证明安装对了： 然后统一运行hexo s打开本地浏览器访问 http://localhost:4000/ 即可看到更新后的主题： PS:因为我最后将博客的源码也会保管在github上面，所以我多了一个步骤，会将安装好的volantis主题放在theme 文件夹下，其主题文件在这个位置： 1node_modules\\hexo-theme-volantis copy hexo-theme-volantis整个文件放在 \\themes 下重命名为 volantis 即可； volantis主题调教当你白嫖了一个主题之后，可能会有点难受，因为直接用别人的感觉不太顺手，有些功能不想要，有些功能想有他没有，怎么办？哎~ 没关系，开发主题的大佬们已经想到了，留了很多接口供你调教，接下来我会捡一些重要的部分share出来，后续更多的细节就靠自己挖取了； 在将详细调教之前，先透露一个小妙招，刚刚copy的主题文件中，有一个_config.yml ，加下来的主题调教和其分不开，我们可以copy出来此主题配置文件，后续在上面做修改即可。 在主题修改之前，先在blog根目录下建立一个_config_volantis.yml，它的优先级会高于 _config.yml，后续主题修改可以在 _config_volantis.yml 上进行，这样不会改坏原本的配置，示例如下： volantis主题调教1–网站主页修改首先安装完volantis之后，进入配置好的网页就是主页，主页主要有如下部分组成： 接下来就来修改一些配件内容，做一个示范介绍，用到的样例参考上面介绍的volantis主题下的_config.yml以及官方学习文档之网站与文章封面 、侧边栏配置 、 设置网站页脚 网站主页修改之一：title、subtitle、feature、background 修改主题的title 、 描述 以及feature都是放在cover下的，我们首先从volantis主题下的_config.yml copy处 cover 整个字段到新建的 _config.volantis.yml文件里面，如下分别是各个部分的内容： 文件配置从上到下进行说明，首先是backgroand ，这个后面就是跟的一个网络图片，你可以自己找到一个图片进行url替换，即可完成背景图片替换，如果想用自己上传的图片，可以配置图床，然后上传上去，获取url即可做到，详情可以参考以下连接： title 字段后面就是主题title了，默认是volantis，也就是上面网页显示的volantis，我们在这里修改成 Tom&#39;s blog ，后续看成果图； subtitle 就是描述了，可以对写一段自己想说的话； 接下来就是feature了，这里默认已经有了多个，可以根据个人情况进行增加或删除，接下来我会举例说明如何修改： feature修改介绍feature每个块有四个部分组成，分别是： 1name / icon / img / url name就是你需要显示feature的名字，icon就是图标，image就是上面的图片，url 就是对应要跳转的地方； 接下来来做一些增删改查的实例： feature修改之：增 我们新增一个test到主页上的feature里面，当点击test的时候，显示这里什么都没有，应该如何做？ 首先自然是显示出来这个feature，按照上面所说的，我们新增如下部分代码： 1234- name: test icon: # img: https://cdn.jsdelivr.net/gh/twitter/twemoji@13.0/assets/svg/1f9ec.svg url: /test/ 新增完毕后整体feature情况如下： 修改完成后使用 hexo s 就可以重新部署，然后访问 http://localhost:4000/ 即可看到修改后的效果： 这个时候聪明的你会发现，点击测试没有任何反应，那是因为没有将其修改响应创建出来，因为我们填写的是/test/ ，这代表他会去 \\source\\test下面去找结果，这个时候我们需要生成对应的文件目录和index.md给它，使用如下命令可以生成： 1hexo new page &quot;test&quot; #test 可以替换 命令运行完成后，你可以在 source 目录下面发现如下结果： 这个时候，在重新 hexo s + 浏览器访问 http://localhost:4000/ ，再去点击测试就会有响应，进入到生产的index.md界面里面，在这个里面可以显示一些其他想显示的东西，后续的就看如何发挥了 feature修改之：删删除部分比较容易，直接把对应部分的直接拿掉即可，比如我们删除掉示例部分，需要拿掉的部分如下： 1234- name: 示例 icon: # img: volantis-static/media/twemoji/assets/svg/1f396.svg # https://cdn.jsdelivr.net/gh/twitter/twemoji@13.0/assets/svg/1f396.svg url: /examples/ 删除之后，保存即可，然后运行 hexo s 可以再看看结果：可以看见如下部分就不再拥有示例部分了： feature修改之：改feature中有些功能初始化之后是点击时没有反应的，我个人玩法比较简单，不需要这么多功能，因此之做了分类和标签以及源码的功能，参考设定如下： 123456789101112- name: 主页 icon: # url: /v4/getting-started/ - name: 分类 icon: # url: categories/ - name: 标签 icon: # url: tags/ - name: 源码 icon: # url: https://github.com/DevBugCat 修改完 _config.volantis.yml 文件后，还需要创建对应文件，比如分类和标签需要创建对应文件，而源码需要你给出对应的仓库连接：创建文件命令如下： 12hexo new page &quot;categories&quot;hexo new page &quot;tags&quot; 运行完之后可以看到在source文件夹下多了几个文件夹：这个时候再运行查看点击即可访问：比如我点击分类就可以看到界面： 后续上传文件的时候对文章进行分类和标签标注即可，如何标注可以参考如下图片： 我个人比较懒，前一篇有写说hexo有样例模板，即在 scaffolds\\post.md 文件夹下，修改成如下内容： 123456789---title: &#123;&#123; title &#125;&#125;date: &#123;&#123; date &#125;&#125;tags:- categories:---- 这样使用 hexo new “文章名字” 时就可以直接得到 tags 和 cattegories 内容，然后每篇文章填写一下即可。 volantis主题调教2 – 网站layout功能调教layout功能即如下位置： 1layout_scheme: dock # blank (留白), search (搜索), dock (坞), featured (精选), focus (焦点) 我个人选择的时search，方便后续想搜索文章的时候可以搜索到，因此修改为了如下内容： 1layout_scheme: search # blank (留白), search (搜索), dock (坞), featured (精选), focus (焦点) 改为search的layout之后，在search 栏上会default出现提示词，在如下位置：可以修改为需要的内容，比如测试时改为 测试一下 1search: 测试一下 # search bar placeholder 修改完成后就再 hexo s 去本地浏览器查看结果： 那这个时候修改完了吗？no no no~ ，细心的你会输入一些内容试试看，结果发现，输入之后点击搜索没有用呀，啥都没有，怎么办？官网已经给了解决办法了，不要慌，看看这里：站内搜索 ，你只需要新增如下修改即可完成： 1234#搜索功能：search: enable: true service: hexo 再去测试一下就会发现ok啦~看到这个界面就已经部署好了，至于为什么是空，那肯定是因为你还一篇博客都没写呀。 volantis主题调教3 – 侧边栏功能侧边栏功能可以在volantis主题下的_config.yml搜索 Sidebar 部分，全部拷贝到 _config.volantis.yml 里面，然后在做修改：其实主题创建的人已经提供了很多功能了，参考这些内容进行一些修改： 这里已经提供了多个侧边栏结果了，我们可以选择一些展示，即修改 for_page 里面的内容进行增减，比如现在有 blogger, category, tagcloud, donate 等内容，比如可以新增一个 webinfo 来做一些站点信息统计： 1for_page: [blogger, category, tagcloud, donate,webinfo] 当然，你可以修改这个里面的内容，比如 blooger 里面修改个人信息，我这里举个个人例子在上面，可以参考对应修改： 123456789101112131415blogger: class: blogger display: [desktop, mobile] # [desktop, mobile] avatar: https://gcore.jsdelivr.net/gh/tom-li-520/blogImage@main/Image/panzi.png # https://gcore.jsdelivr.net/gh/volantis-x/cdn-org/blog/Logo-NavBar@3x.png shape: rectangle # circle, rectangle url: /about/ title: tom.li subtitle: 通过以下方式联系我 description: 有趣的生活，有趣的技术 jinrishici: false # Poetry Today. You can set a string, and it will be displayed when loading fails. social: - icon: fa-solid fa-envelope url: mailto:1757578037@qq.com - icon: fab fa-github url: https://github.com/tom-li-520 最后展示一下修改后的结果（PS：可能你现在还没有开始写blog，所以这些统计结果都不在，不要担心，你开始写之后就会出现的） volantis主题调教4 – 页脚调整依旧是老套路了，乱拳打死老师傅，还是从主题下的_config.yml搜索 site_footer 部分，全部拷贝到 _config.volantis.yml 里面 如下： 12345678910111213141516171819202122site_footer: # layout of footer: [aplayer, social, license, info, copyright] layout: [aplayer, social, license, analytics, info, copyright] social: - icon: #fa-solid fa-rss url: # or - img: url: # or - avatar: url: # site source source: https://github.com/volantis-x/volantis-docs/ # analytics using leancloud analytics: &gt; &lt;span id=&quot;lc-sv&quot;&gt;本站总访问量为 &lt;span id=&#x27;number&#x27;&gt;&lt;i class=&quot;fa-solid fa-loader fa-spin fa-fw&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/span&gt; 次&lt;/span&gt; &lt;span id=&quot;lc-uv&quot;&gt;访客数为 &lt;span id=&#x27;number&#x27;&gt;&lt;i class=&quot;fa-solid fa-loader fa-spin fa-fw&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/span&gt; 人&lt;/span&gt; # site copyright copyright: &#x27;[Copyright © since 2017 XXX](/)&#x27; # You can add your own property here. (Support markdown, for example: br: &#x27;&lt;br&gt;&#x27;) br: &#x27;&lt;br&gt;&#x27; 需要你自己添加一些信息，比如 social 里面的信息：icon 是小图标，可以去 FontAwesome 字体图标中文Icon 里面去找，找到之后复制中间文字即可使用： url就是你需要贴的网址之类的了。 后续还需要改的是 copyright 可以修改到你想要开放的年限，比如 2025-2026修改完成后如下： 结语主页修改就到这里了，后续会对文章界面的修改再出一篇做详细介绍，主要内容包含菜单栏修改，评论去修改，文章默认的一些设定之类的内容，详情见如下link了：","categories":[{"name":"Hexo","slug":"Hexo","permalink":"http://example.com/categories/Hexo/"},{"name":"Hexo 学习记录","slug":"Hexo/Hexo-学习记录","permalink":"http://example.com/categories/Hexo/Hexo-%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://example.com/tags/hexo/"}]},{"title":"Hexo 学习记录","slug":"Hexo/hexo学习记录","date":"2025-03-03T14:10:56.000Z","updated":"2025-03-15T12:10:42.918Z","comments":true,"path":"2025/03/03/Hexo/hexo学习记录/","permalink":"http://example.com/2025/03/03/Hexo/hexo%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/","excerpt":"","text":"最近突发奇想，想做一个个人网站记录学习心得，通过hexo + github 的方式做了一个blog，但是奈何页面模板不太理想，想要做一个好看一丢丢的博客网站出来，因此需要学习一些关于hexo的一下，以下部分用于记录学习心得；（PS 搭建网站可以参考如下link : 参考连接) 在这里感谢博主的好心分享） 安装Hexo1npm install -g hexo-cli 初始化Hexo1npm install 初始化完成后，会创建如下目录 12345678.├── _config.yml├── package.json├── scaffolds├── source| ├── _drafts| └── _posts└── themes 其中： _config.yml 是配置文件，大部分配置都在此可以配置； scaffolds 里面存放了模板文件，当使用 hexo new filename时，会根据此处的模板建立文档 themes 里面存放了模板信息，当在 hexo主题 找到合适主题之后，可以使用以下cmd 拉取： 1234# 进入Hexo项目的themes目录cd your-hexo-site/themes# 克隆主题仓库git clone https://github.com/theme-next/hexo-theme-next.git 主题名 source 的_posts里面存放的就是博客内容了，写的博客都可以放在这个里面 _config.yml相关大部分内容在如下link ： _config.yml 介绍 常用部分如下：","categories":[{"name":"Hexo","slug":"Hexo","permalink":"http://example.com/categories/Hexo/"},{"name":"Hexo 学习记录","slug":"Hexo/Hexo-学习记录","permalink":"http://example.com/categories/Hexo/Hexo-%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://example.com/tags/hexo/"}]},{"title":"leetcood","slug":"leetcode/leetcood专题说明","date":"2025-03-01T12:38:13.000Z","updated":"2025-03-27T00:40:23.230Z","comments":true,"path":"2025/03/01/leetcode/leetcood专题说明/","permalink":"http://example.com/2025/03/01/leetcode/leetcood%E4%B8%93%E9%A2%98%E8%AF%B4%E6%98%8E/","excerpt":"","text":"说明本主题主要用于记录一些leetcode刷题相关算法，用于总结提升，计划是参加每日一题，锻炼自己的大脑思维，使得不至于过于固化，后续文章会由题目、解法、个人理解、小节等出详细说明。","categories":[{"name":"leetcode","slug":"leetcode","permalink":"http://example.com/categories/leetcode/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"http://example.com/tags/leetcode/"}]}],"categories":[{"name":"python学习","slug":"python学习","permalink":"http://example.com/categories/python%E5%AD%A6%E4%B9%A0/"},{"name":"python小妙招","slug":"python学习/python小妙招","permalink":"http://example.com/categories/python%E5%AD%A6%E4%B9%A0/python%E5%B0%8F%E5%A6%99%E6%8B%9B/"},{"name":"Hexo","slug":"Hexo","permalink":"http://example.com/categories/Hexo/"},{"name":"Hexo 学习记录","slug":"Hexo/Hexo-学习记录","permalink":"http://example.com/categories/Hexo/Hexo-%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"},{"name":"leetcode","slug":"leetcode","permalink":"http://example.com/categories/leetcode/"}],"tags":[{"name":"python","slug":"python","permalink":"http://example.com/tags/python/"},{"name":"hexo","slug":"hexo","permalink":"http://example.com/tags/hexo/"},{"name":"leetcode","slug":"leetcode","permalink":"http://example.com/tags/leetcode/"}]}